import{useEffect as e,useState as t,useCallback as r}from"/cdn/react";export default function o(o){const[n,c]=t([]),[i,f]=t([]),[s,l]=t(o||{});let p={};const a=r((e=>{p=mergeDeep(p,e);const t=mergeDeep({},s,p);removeUndefined(t),l(t)}),[s]);return e((()=>{const e=Object.keys(s),t=Array.prototype.filter.call(n||[],(t=>{let r=!0;return null!=t&&(e.forEach((e=>{if(!r)return;const o=s[e];o.filter&&Object.prototype.hasOwnProperty.call(o,"value")&&(r=r&&Object.prototype.hasOwnProperty.call(t,e)&&o.filter(o.value,t[e],t))})),r)}));f(t)}),[n,s]),[i,c,s,a]}export function isObject(e){return e&&"object"==typeof e&&!Array.isArray(e)}export function mergeDeep(e,...t){if(!t.length)return e;const r=t.shift();if(isObject(e)&&isObject(r))for(const t in r)isObject(r[t])?(e[t]||Object.assign(e,{[t]:{}}),mergeDeep(e[t],r[t])):Object.assign(e,{[t]:r[t]});return mergeDeep(e,...t)}export function removeUndefined(e){if(Array.isArray(e))for(let t=e.length-1;t>=0;t--){let r=e[t];void 0===r?e.splice(t,1):removeUndefined(r)}else"object"==typeof e&&Object.keys(e).forEach((t=>{void 0===e[t]?delete e[t]:removeUndefined(e[t])}))}