import{mergeDeep as t}from"./use-filter.js";import e from"/Utils/concurrency-manager.js";function n(t){const e=Object.keys(t);if(!e.length)return"";const n=[];return e.forEach((e=>{let o=t[e];Array.isArray(o)&&(o=o.join(",")),n.push([e,o].join("="))})),"?"+n.join("&")}export function getCardList(t={}){return fetch("/pseudo-api/card-list/"+n(t)).then((t=>t.json()))}export function getBackup(t={}){return fetch("/pseudo-api/backup/"+n(t)).then((t=>t.json()))}export function getCard(t,e={}){return fetch("/pseudo-api/card/"+t+n(e)).then((t=>t.json()))}export function saveCard(t,e){return fetch("/pseudo-api/card/"+t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}export function deleteCard(t){return fetch("/pseudo-api/card/"+t,{method:"DEL"})}export function getSettings(t={}){return fetch("/pseudo-api/settings/"+n(t)).then((t=>t.json()))}export function saveSettings(t){return fetch("/pseudo-api/settings/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})}export function getRitoCards(t={}){return fetch("/pseudo-api/game-data/card-list/"+n(t)).then((t=>t.json()))}const o=e();export function patchRitoCards(t){return new Promise(((e,n)=>{o.sequential((async()=>{const o={...await getRitoCards(),...t};return fetch("/pseudo-api/game-data/card-list/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}).then(e,n)}))}))}export async function getLatestRitoData(t={}){t.t=Date.now();const e=n(t),o="https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon/core/data/globals-en_us.json"+e,r=await fetch(o).then((t=>t.json())),i=r.sets.map((t=>{const n=t.nameRef.toLowerCase();return fetch(`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_${n}/data/${n}-en_us.json${e}`).then((t=>t.json())).then((e=>{t.data=e})).catch((()=>{}))}));return await Promise.all(i),r.sets.filter((t=>t.data)),r}export async function getRitoPoCItemRelic(e={},o){return fetch("/pseudo-api/game-data/poc-item-relic-list/"+n(e)).then((t=>t.json())).then((e=>t(o,e)))}export function patchRitoPocItemRelic(t){return new Promise(((e,n)=>{o.sequential((async()=>{const o={...await getRitoPoCItemRelic(),...t};return fetch("/pseudo-api/game-data/poc-item-relic-list/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}).then(e,n)}))}))}export async function getLatestPoCItemRelicData(t={}){t.t=Date.now();const e=n(t),o="https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/data/items-en_us.json"+e,r="https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/data/relics-en_us.json"+e,[i,a]=await Promise.all([fetch(o).then((t=>t.json())),fetch(r).then((t=>t.json()))]);return Array.prototype.forEach.call(i,(t=>{t.url=`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/img/items/en_us/${t.itemCode}.png${e}`,t.urlFull=`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/img/items/en_us/${t.itemCode}-full.png${e}`})),Array.prototype.forEach.call(a,(t=>{t.url=`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/img/relics/en_us/${t.relicCode}.png${e}`,t.urlFull=`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_Adventure/img/relics/en_us/${t.relicCode}-full.png${e}`})),{items:i,relics:a}}const r={};export function getRitoCardImage(t,e,o={}){if(r[t]&&r[t][e])return r[t][e];r[t]=r[t]||{};const i=t.toLowerCase();return o.t=Date.now(),r[t][e]=fetch(`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon_${i}/img/cards/en_us/${e}.png?${n(o)}`).then((t=>t.blob())).then((t=>{const e=new FileReader;return new Promise((n=>{e.addEventListener("load",(()=>{n(e.result)}),!1),e.readAsDataURL(t)}))}))}const i={};export function getRitoSetIconData(t,e={}){return i[t]?i[t]:(e.t=Date.now(),i[t]=new Promise((async(o,r)=>{const a="https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon/core/data/globals-en_us.json"+n(e),s=await fetch(a).then((t=>t.json())),c=Array.prototype.find.call(s.sets,(e=>e.nameRef===t));c||(delete i[t],r(new Error("Unknown Set")));const d=`https://cdn.jsdelivr.net/gh/InFinity54/LoR_DDragon/core/${/img\/sets\/([^\/\n]+)$/gim.exec(c.iconAbsolutePath)[0].replace("_crispmip","")}`,p=await fetch(d).then((t=>t.blob())),u=new FileReader;u.addEventListener("load",(()=>{o({url:u.result,name:c.name})}),!1),u.readAsDataURL(p)})))}