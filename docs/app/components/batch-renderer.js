import t,{div as e}from"/Utils/elements.js";import i from"/Utils/load-css.js";import{useState as r}from"/cdn/react";import s from"/Components/card-template/svg-wrap.js";import o from"./deck/deck-card.js";const h=i("/Components/batch-renderer.css");export function getResolutionFor(t){return"deck"===t?{width:336,height:512}:"keyword"===t?{width:512,height:512}:{width:680,height:1024}}const n={list:void 0,pairs:{}};export function calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e=1){if(n.list===t){if(n.pairs[e])return n.pairs[e]}else n.pairs={},n.list=t;const i=t.length,r=Math.ceil(i/e);if(!t.length)return n.pairs[e]={rows:r,cols:e};const s=t.map((t=>getResolutionFor(t.type))).reduce(((t,e)=>t?e.width>t.width?e:t:e)),o=s.width/s.height,h=3*(s.width+1)/s.height,c=s.width/(s.height-1),l=s.width*e/(s.height*r);if(n.pairs[e]={cols:e,rows:r,width:s.width*e,height:s.height*r,resolution:s},3===i){const t=1;return n.pairs[e]={rows:t,cols:3,width:3*s.width,height:s.height*t,resolution:s}}return o===l||(l>h?e>1&&(n.pairs[e]=calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e-1)):l<c&&(n.pairs[e]=calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e+1))),n.pairs[e]}export default t((function(t){const i=function(t){const[e,i]=r([...t]),s=[...t];if(e.length!==t.length)return i(s),s;const o=t.length;for(let r=0;r<o;r++)if(e[r]!==t[r])return i(s),s;return e}(t.cards),{width:h,height:n,resolution:c}=calculateRowsAndColsForCardsRecursivelyWithCacheUse(i);return s({width:h,height:n,loading:t.loading},e({className:"cards-grid"},t.cards.map((t=>o({key:t.id||t.cardCode||t.url,single:!0,card:t,isInclusion:!0})))))}),h);