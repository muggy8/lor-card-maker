import t,{div as e}from"/Utils/elements.js";import r from"/Utils/load-css.js";import{createElement as i,useState as s,useCallback as o}from"/cdn/react";import{typeToComponent as h}from"/Views/list.js";import{svgRefference as c}from"/Views/card-editor.js";import n from"/Components/card-template/svg-wrap.js";import l from"./deck/deck-card.js";const a=r("/Components/batch-renderer.css");export function getResolutionFor(t){return"deck"===t?{width:336,height:512}:"keyword"===t?{width:512,height:512}:{width:680,height:1024}}const d={list:void 0,pairs:{}};export function calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e=1){if(d.list===t){if(d.pairs[e])return d.pairs[e]}else d.pairs={},d.list=t;const r=t.length,i=Math.ceil(r/e);if(!t.length)return d.pairs[e]={rows:i,cols:e};const s=t.map((t=>getResolutionFor(t.type))).reduce(((t,e)=>t?e.width>t.width?e:t:e)),o=s.width/s.height,h=3*(s.width+1)/s.height,c=s.width/(s.height-1),n=s.width*e/(s.height*i);if(d.pairs[e]={cols:e,rows:i,width:s.width*e,height:s.height*i,resolution:s},3===r){const t=1;return d.pairs[e]={rows:t,cols:3,width:3*s.width,height:s.height*t,resolution:s}}return o===n||(n>h?e>1&&(d.pairs[e]=calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e-1)):n<c&&(d.pairs[e]=calculateRowsAndColsForCardsRecursivelyWithCacheUse(t,e+1))),d.pairs[e]}export default t((function(t){const r=function(t){const[e,r]=s([...t]),i=[...t];if(e.length!==t.length)return r(i),i;const o=t.length;for(let s=0;s<o;s++)if(e[s]!==t[s])return r(i),i;return e}(t.cards),{width:h,height:a,resolution:d}=calculateRowsAndColsForCardsRecursivelyWithCacheUse(r),u=o((()=>{}),[]);return n({width:h,height:a,loading:t.loading},i(c.Provider,{value:{current:null,setRef:u}},e({className:"cards-grid"},t.cards.map((t=>l({key:t.id||t.cardCode||t.url,single:!0,card:t}))))))}),a);