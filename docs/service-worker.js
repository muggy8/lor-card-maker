let installRoot=location.pathname.replace(/[\/]*\.js$/,"");self.addEventListener("install",(function(e){console.log("begin install",e,location),e.waitUntil(makeRequestAndCachePathsRecursive(installRoot).then(()=>console.log("install complete")))})),self.addEventListener("activate",(function(e){clients.claim()})),self.addEventListener("fetch",(function(e){let t=e.request,a=t.url.replace(t.referrer,"");a.startsWith("pseudo-api")?"POST"===e.request.method||"PUT"===e.request.method?a.includes(cardListPath)?e.respondWith(saveCardList(t,a)):a.includes(cardDataPath)&&e.respondWith(saveCardData(t,a)):"GET"===e.request.method?a.includes(cardListPath)?e.respondWith(getSavedCardList(t,a)):a.includes(cardDataPath)&&e.respondWith(getSavedCard(t,a)):"DEL"===e.request.method&&a.includes(cardDataPath)&&e.respondWith(deleteSavedCard(t,a)):/^\/sw\/refresh$/.test(e.request.url.replace(e.target.location.origin,""))?e.respondWith(makeRequestAndCachePathsRecursive(installRoot).then(()=>intelegentFetch(installRoot))):e.respondWith(intelegentFetch(e.request))}));const cacheLocation="cards",cardListPath="pseudo-api/card-list/",cardDataPath="pseudo-api/card/";async function saveCardList(e,t){let a=await e.text(),s=await caches.open("cards"),n=new Response(a,{"Content-Type":"application/json",status:200});return await s.put(t,n.clone()),n}async function getSavedCardList(e,t){let a=await caches.open("cards"),s=await a.match(t);return s||new Response("[]",{"Content-Type":"application/json",status:200})}async function saveCardData(e,t){let a=await e.text(),s=await caches.open("cards"),n=new Response(a,{"Content-Type":"application/json",status:200});return await s.put(t,n.clone()),n}async function getSavedCard(e,t){let a=await caches.open("cards"),s=await a.match(t);return s||new Response("{}",{"Content-Type":"application/json",status:200})}async function deleteSavedCard(e,t){let a=await caches.open("cards");return await a.delete(t),new Response("{}",{"Content-Type":"application/json",status:200})}const URL_REGEX=/(href|src)=['"]([^'"]+)['"]|fetch\(['"]([^'"]+)['"]\)/gi,CACHE_NAME="assets";async function makeRequestAndCachePathsRecursive(e,t=[]){if(t.some(t=>t===e))return;t.push(e);let a,s=await intelegentFetch(e).then(e=>e.text()).catch(e=>{console.warn("Caching of asset failed",e)}),n=[];for(;a=URL_REGEX.exec(s);){let e=a[2],t=a[3];e&&n.push(e),t&&n.push(t)}n=n.filter(e=>/(^\/|^http(s):\/\/cdn)/.test(e));let c=n.map(e=>makeRequestAndCachePathsRecursive(e,t));return Promise.all(c)}async function intelegentFetch(e){let t,a=await caches.open("assets");if(t=await a.match(e)){let a=t.headers.get("etag"),s=await fetch(e,{method:"HEAD"}).catch(e=>console.warn(e));if(!(s&&s.headers&&s.headers.get("etag")&&s.headers.get("etag")!==a))return t;console.log("asset needs refreshing",e)}let s=await fetch(e.url||e);return s.ok?(await a.put(e,s.clone()),s):Promise.reject(s)}