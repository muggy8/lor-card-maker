!function(t){let a=Object.create(App.baseBuilderController);a.attached=!1,a.cardId="";let e=a.card={};a.clearCard=function(){let t=this,a=t.card=t.card||{};t.cardId="",t.exporting=!1,a.name="",a.clan="",a.effect="",a.keywords=[],a.mana=0,a.art="",a.textBgTint=[0,0,0,0],a.transform={x:0,y:0,scale:1},a.rarity="none",a.speed="slow",a.faction=[],a.blueWords=[],a.orangeWords=[],a.effectFontSize=34,a.artist=""};a.clearCard();a.createPreview=function(t){let a=this,e=t||a.card;e.effectFontSize=34;let n=e.keywords.length>1?e.keywords.map(t=>createMiniKeyword("./assets/symbol/"+cardOptionsData.icons[t])):e.keywords.map(t=>createWideKeyword(t,"./assets/symbol/"+cardOptionsData.icons[t]));if(n.lenght<=0)n="";else if(1===n.lenght)n=` <gtransform="translate(${340-n[0].width/2}, 635)"> ${n[0].content} </g>`;else{let t=340-n.reduce((t,a)=>t+a.width,0)/2,a=0;n=n.reduce((e,n)=>{let r=e+` <g transform="translate(${t+a}, 635)"> ${n.content} </g>`;return a+=n.width,r},"")}let r=` <svg width="680" height="1024" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 680 1024" class="{:(this.app.cardInstance = this), 'update app state to point to the correct svg instance':} {:this.app.calcBgTint(), 'calculate text area background tint continiousely':}|{card.art},{card.transform.x},{card.transform.y},{card.transform.scale}|" > <foreignObject style="background-color: rgba(0,0,0,0);" id="cropper-${a.cardId}" width="680" height="1024" x="0" y="0"> <canvas id="cropper-canvas-${a.cardId}" width="680" height="1024"></canvas> </foreignObject> <clipPath id="art-mask-${a.cardId}"> <ellipse rx="240" ry="240" cx="340" cy="294"/> </clipPath> ${e.art?` <image id="card-art" clip-path="url(#art-mask-${a.cardId})" xlink:href="${e.art}" x="{:this.app.card.transform.x:}|{card.transform.x}|" y="{:this.app.card.transform.y:}|{card.transform.y}|" preserveAspectRatio="xMidYMid meet" width="{:680 * this.app.card.transform.scale:}|{card.transform.scale}|" height="{:680 * this.app.card.transform.scale:}|{card.transform.scale}|" />`:""} <image id="card-background-${a.cardId}" width="634" height="470" x="23" y="463" xlink:href="./assets/spell/background.png"/> ${e.art?'<path class="color-mixer" id="card-text-color-mix" d=" M 20,500    l 110,-50 a 240 200 0 0 0 420, 0 l 110,50 v 410 l -320,30 l -320,-30 Z " fill="rgba({:this.app.card.textBgTint.join(\',\'):}|{card.textBgTint}|)"/>':""} <image id="card-frame-${a.cardId}" width="680" height="1024" x="0" y="0" xlink:href="./assets/spell/frame${e.speed}${e.clan?"token":e.rarity}.png"/> ${e.faction.length?` <image id="card-region-box-${a.cardId}" width="220" height="280" x="405" y="56" href="./assets/regions/spell/regionbox${e.faction.length<3?e.faction.length:3}.png"/> <image id="card-region-1-${a.cardId}" width="90" height="90" x="445" y="84" href="./assets/regions/${e.faction[0]}.png"/>`:""} ${e.faction.length>1?`<image id="card-region-1-${a.cardId}" width="90" height="90" x="494" y="140" href="./assets/regions/${e.faction[1]}.png"/>`:""} ${e.faction.length>2?`<image id="card-region-1-${a.cardId}" width="90" height="90" x="521" y="214" href="./assets/regions/${e.faction[2]}.png"/>`:""} <rect id="mana-cost-${a.cardId}" width="120" height="120" x="31" y="44" opacity="0"/> <text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="50" fill="#fff" stroke="#fff">${e.mana}</text> <rect id="name-${a.cardId}" width="550" height="70" x="60" y="585" opacity="0"/> ${e.name?`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true)).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff" font-style="900">${e.name?e.name.toUpperCase():""}</text>`:""} ${e.clan?` <rect id="clan-text-area-${a.cardId}" width="210" height="46" x="230" y="922"  fill="#CFF" opacity="0"/> <text class="bold caps {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff">${e.clan}</text> `:""} \x3c!-- <rect id="keywords-${a.cardId}" width="550" height="70" fill="#CFF" x="60" y="655" opacity="0.75"/> --\x3e ${n} <foreignObject style="background-color: rgba(0,0,0,0);" id="effect-${a.cardId}" width="550" height="145" x="60" y="740"> <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:{:this.app.card.effectFontSize:}|{card.effectFontSize}|px; text-align: center; overflow: hidden; height: 100%; color: #fff" data-init="{:proxymity.on.renderend.then(()=>this.app && this.app.effectResize(this)):}">${a.decorateText(e.effect)}</div> </foreignObject> <rect id="artist-${a.cardId}" width="280" height="30" fill="#FFF" x="12" y="990" opacity="0"/> ${e.artist?`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {align:'left'})).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff" font-style="900">‚úç: ${e.artist?e.artist:""}</text>`:""} <g class="{:!${!!e.art} || this.app.exporting ? 'hide' : '' :}|{exporting}|"> <path d=" M 340, 10 l 35, 60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-up-${a.cardId}" onclick="this.app.card.transform.y -= 10" class="clickable" /> <path d=" M 340, 575 l 35, -60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-down-${a.cardId}" onclick="this.app.card.transform.y += 10" class="clickable" /> <path d=" M 55, 300 l 60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-left-${a.cardId}" onclick="this.app.card.transform.x -= 10" class="clickable" /> <path d=" M 625, 300 l -60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-right-${a.cardId}" onclick="this.app.card.transform.x += 10" class="clickable" /> <text font-size="156" x="180" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale += 0.05">+</text> <text font-size="156" x="440" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale -= 0.05">-</text> </g> </svg>`,i=proxymity(r,a);return i.when.detach((function(){i.unlink()})),i},a.saveCard=async function(){let t=this;t.cardId=await App.storage.saveSpell(t.card,t.cardId)},a.deleteCard=async function(){await App.storage.delSavedSpell(this.cardId),window.location.reload()},a.calcBgTint=async function(){let t=this;if(!t.card.art)return;let a="cropper-canvas-"+t.cardId,n=t.cardInstance.getElementById(a).getContext("2d"),r=new Image,i=new FastAverageColor;r.src=t.card.art,r.onload=function(){console.log(r.width,r.height);let a=-e.transform.x,c=-e.transform.y,d=e.transform.scale,s=a/d+290/d,o=c/d+244/d,l=100/d,f=100/d;n.drawImage(r,s,o,l,f,290,244,100,100);let p=n.getImageData(290,244,100,100);t.card.textBgTint=i.getColorFromArray4(p.data)}};App.spellBuilder=a;let n=proxymity(' <main class="flex hcenter gutter-rl-.5"> <div class="card-preview gutter-t-4 gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> {:this.app.attached && this.app.createPreview():}|{card.name},{card.clan},{card.effect},{card.keywords.length},{card.mana},{card.art},{card.rarity},{card.faction.length},{card.speed},{card.artist},{card.blueWords.*},{card.orangeWords.*},{attached}| <div class="flex hcenter gutter-tb"> <button onclick="this.app.exportCard()">Export</button> <div class="gutter-rl"></div> <button onclick="this.app.saveCard()">Save Card</button> <div class="gutter-rl"></div> <button onclick="this.app.deleteCard()" class="{:this.app.cardId ? \'\' : \'hide\':}|{cardId}|">Delete Card</button> </div> <div class="gutter-b-3"></div> </div> <div class="card-configs gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> {:this.app.cardOptionsController = App.cardOptions(this.app.card, [ "none", "common", "rare", "epic" ]):} </div> </main>\n',a);a.focus=a.focusFactory(n,"spellBuilder","Spell Builder")}();