!function(t){let e=Object.create(App.baseBuilderController);e.attached=!1,e.cardId="";let a=e.card={};e.clearCard=function(){let t=this,e=t.card=t.card||{};t.cardId="",t.exporting=!1,e.name="",e.clan="",e.effect="",e.keywords=[],e.mana=NaN,e.art="",e.textBgTint=[0,0,0,0],e.transform={x:0,y:0,scale:1},e.rarity="none",e.power=NaN,e.health=NaN,e.speed="none",e.faction=[],e.blueWords=[],e.orangeWords=[],e.effectFontSize=34,e.artist=""};e.clearCard();e.createPreview=function(t){let e=this,a=t||e.card;a.effectFontSize=34;let n=a.keywords.length>1?a.keywords.map(t=>createMiniKeyword("./assets/symbol/"+cardOptionsData.icons[t])):a.keywords.map(t=>createWideKeyword(t,"./assets/symbol/"+cardOptionsData.icons[t]));if(n.lenght<=0)n="";else if(1===n.lenght)n=` <gtransform="translate(${340-n[0].width/2}, 635)"> ${n[0].content} </g>`;else{let t=340-n.reduce((t,e)=>t+e.width,0)/2,e=0;n=n.reduce((a,n)=>{let r=a+` <g transform="translate(${t+e}, 635)"> ${n.content} </g>`;return e+=n.width,r},"")}let r=` <svg width="680" height="1024" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 680 1024" class="{:this.app.calcBgTint(), 'calculate text area background tint continiousely':}|{card.art},{card.transform.x},{card.transform.y},{card.transform.scale}|" > <foreignObject style="background-color: rgba(0,0,0,0);" id="cropper-${e.cardId}" width="680" height="1024" x="0" y="0"> <canvas id="cropper-canvas-${e.cardId}" width="680" height="1024"></canvas> </foreignObject> <clipPath id="art-mask-${e.cardId}"> <ellipse rx="240" ry="240" cx="340" cy="294"/> </clipPath> ${a.art?` <image id="card-art" clip-path="url(#art-mask-${e.cardId})" xlink:href="${a.art}" x="{:this.app.card.transform.x:}|{card.transform.x}|" y="{:this.app.card.transform.y:}|{card.transform.y}|" preserveAspectRatio="xMidYMid meet" width="{:680 * this.app.card.transform.scale:}|{card.transform.scale}|" height="{:680 * this.app.card.transform.scale:}|{card.transform.scale}|" /> <image id="card-background-${e.cardId}" width="634" height="470" x="23" y="463" xlink:href="./assets/spell/background.png"/> <path class="color-mixer" id="card-text-color-mix" d=" M 20,500 l 110,-50 a 240 200 0 0 0 420, 0 l 110,50 v 410 l -320,30 l -320,-30 Z " fill="rgba({:this.app.card.textBgTint.join(','):}|{card.textBgTint}|)"/> `:`<image id="card-background-${e.cardId}" width="634" height="470" x="23" y="463" xlink:href="./assets/spell/background-inverted.png"/>`} <image id="card-frame-${e.cardId}" width="680" height="1024" x="0" y="0" xlink:href="./assets/spell/frame${a.speed}${"none"===a.speed?"":a.clan?"token":a.rarity}.png"/> ${a.faction.length?` <image id="card-region-box-${e.cardId}" width="220" height="280" x="405" y="56" href="./assets/regions/spell/regionbox${a.faction.length<3?a.faction.length:3}.png"/> <image id="card-region-1-${e.cardId}" width="90" height="90" x="445" y="84" href="./assets/regions/${a.faction[0]}.png"/>`:""} ${a.faction.length>1?`<image id="card-region-1-${e.cardId}" width="90" height="90" x="494" y="140" href="./assets/regions/${a.faction[1]}.png"/>`:""} ${a.faction.length>2?`<image id="card-region-1-${e.cardId}" width="90" height="90" x="521" y="214" href="./assets/regions/${a.faction[2]}.png"/>`:""} <rect id="mana-cost-${e.cardId}" width="120" height="120" x="31" y="44" opacity="0"/> ${"number"!=typeof a.mana||isNaN(a.mana)?"":`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="50" fill="#fff" stroke="#fff">${a.mana}</text>`} <rect id="name-${e.cardId}" width="550" height="70" x="60" y="585" opacity="0"/> ${a.name?`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true)).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff" font-style="900">${a.name?a.name.toUpperCase():""}</text>`:""} <rect id="power" width="106" height="92" x="47" y="430" fill="#CFF" opacity="0"/> ${"number"!=typeof a.power||isNaN(a.power)?void 0:`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="50" fill="#fff" stroke="#fff">${a.power}</text>`} <rect id="health" width="106" height="92" x="522" y="430" fill="#CFF" opacity="0"/> ${"number"!=typeof a.health||isNaN(a.health)?void 0:`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="50" fill="#fff" stroke="#fff">${a.health}</text>`} ${a.clan?` <rect id="clan-text-area-${e.cardId}" width="210" height="46" x="230" y="922"  fill="#CFF" opacity="0"/> <text class="clan-text caps {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="36" fill="#bbb" stroke="#bbb">${a.clan}</text> `:""} \x3c!-- <rect id="keywords-${e.cardId}" width="550" height="70" fill="#CFF" x="60" y="655" opacity="0.75"/> --\x3e ${n} <foreignObject style="background-color: rgba(0,0,0,0);" id="effect-${e.cardId}" width="550" height="${145+(n?0:70)}" x="60" y="${n?740:655}"> <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:{:this.app.card.effectFontSize:}|{card.effectFontSize}|px; text-align: center; overflow: hidden; height: 100%; color: #fff" data-init="{:proxymity.on.renderend.then(()=>this.app && this.app.effectResize(this)):}">${e.decorateText(a.effect)}</div> </foreignObject> <rect id="artist-${e.cardId}" width="280" height="30" fill="#FFF" x="12" y="990" opacity="0"/> ${a.artist?`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {align:'left'})).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff" font-style="900">‚úç: ${a.artist?a.artist:""}</text>`:""} <g class="{:!${!!a.art} || this.app.exporting ? 'hide' : '' :}|{exporting}|"> <path d=" M 340, 10 l 35, 60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-up-${e.cardId}" onclick="this.app.card.transform.y -= 10" class="clickable" /> <path d=" M 340, 575 l 35, -60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-down-${e.cardId}" onclick="this.app.card.transform.y += 10" class="clickable" /> <path d=" M 55, 300 l 60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-left-${e.cardId}" onclick="this.app.card.transform.x -= 10" class="clickable" /> <path d=" M 625, 300 l -60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-right-${e.cardId}" onclick="this.app.card.transform.x += 10" class="clickable" /> <text font-size="156" x="180" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale += 0.05">+</text> <text font-size="156" x="440" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale -= 0.05">-</text> </g> </svg>`,i=document.createElement("template");i.innerHTML=r.trim();let c=i.content.querySelector("svg"),d=proxymity(c,e);return d.when.detach((function(){d.unlink()})),d.when.append((function(){e.cardInstance=c})),d},e.saveCard=async function(){let t=this;t.cardId=await App.storage.saveSpell(t.card,t.cardId)},e.deleteCard=async function(t){await App.storage.delSavedSpell(t||this.cardId),!t&&window.location.reload()},e.calcBgTint=async function(){let t=this;if(!t.card.art)return;let e="cropper-canvas-"+t.cardId,n=t.cardInstance.getElementById(e).getContext("2d"),r=new Image,i=new FastAverageColor,c=t.card.art;c.trim().startsWith("data:")||(c=await imageToBase64(c)),r.src=c,r.onload=function(){let e=-a.transform.x,c=-a.transform.y,d=a.transform.scale,s=e/d+290/d,o=c/d+244/d,l=100/d,p=100/d;n.drawImage(r,s,o,l,p),n.drawImage(r,s,o,l,p,290,244,100,100);let h=n.getImageData(290,244,100,100);t.card.textBgTint=i.getColorFromArray4(h.data),i.destroy()}};e.automateFrametype=function(t,e){switch(e){case"speed":return function(t){cardOptionsData.spellSpeedOptions.forEach(e=>function(t,e){let a=t.length;for(;a--;)t[a]===e&&t.splice(a,1)}(t.keywords,e))}(t),"none"!==t.speed&&t.keywords.push(t.speed),void("equipment"!==t.speed&&(t.power=NaN,t.health=NaN));case"health":return void(isNaN(t.health)||"number"!=typeof t.health||(t.speed="equipment"));case"power":return void(isNaN(t.power)||"number"!=typeof t.power||(t.speed="equipment"));case"keywords":let e=cardOptionsData.spellSpeedOptions.map(e=>t.keywords.indexOf(e)).filter(t=>t>-1).sort((t,e)=>t-e)[0];return void(void 0!==e?(t.speed=t.keywords[e],"equipment"===t.speed&&(t.power=t.power||0,t.health=t.health||0)):t.speed="none")}};App.spellBuilder=e;let n=proxymity(' <main class="flex hcenter gutter-rl-.5"> <div class="card-preview gutter-t-4 gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> \x3c!-- {:this.app.automateFrametype(this.app.card, "speed"):}|{card.speed}| --\x3e \x3c!-- {:this.app.automateFrametype(this.app.card, "health"):}|{card.health}| --\x3e \x3c!-- {:this.app.automateFrametype(this.app.card, "power"):}|{card.power}| --\x3e \x3c!-- {:this.app.automateFrametype(this.app.card, "keywords"):}|{card.keywords.length}| --\x3e {:this.app.attached && this.app.createPreview():}|{card.name},{card.clan},{card.effect},{card.keywords.length},{card.mana},{card.art},{card.rarity},{card.faction.length},{card.speed},{card.artist},{card.blueWords.*},{card.orangeWords.*},{attached},{card.health},{card.power}| <div class="flex hcenter gutter-tb"> <button onclick="this.app.deleteCard()" class="{:this.app.cardId ? \'\' : \'hide\':}|{cardId}|">{:App.lang[App.langChoice].delete_card:}</button> <div class="gutter-rl"></div> <button onclick="this.app.saveCard()">{:App.lang[App.langChoice].save_card:}</button> <div class="gutter-rl"></div> <button onclick="this.app.exportCard()">{:App.lang[App.langChoice].export:}</button> </div> <div class="gutter-b-3"></div> </div> <div class="card-configs gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> {:this.app.cardOptionsController = App.cardOptions(this.app.card, [ "none", "common", "rare", "epic" ]):} </div> </main>\n',e);e.focus=e.focusFactory(n,"spellBuilder","Spell Builder")}();