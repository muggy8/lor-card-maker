!function(t){let a=Object.create(App.baseBuilderController);a.cardId="";let e=a.card={};(a.clearCard=function(){e.name="",e.effect="",e.effectHeight=0,e.keywords=["landmark"],e.mana=0,e.art="",e.transform={x:0,y:0,scale:1},e.faction=[],e.rarity="gemless",e.blueWords=[],e.orangeWords=[],e.effectFontSize=34,a.exporting=!1})();a.createPreview=function(t){let e=t||a.card;e.effectFontSize=34;let n=e.keywords.length>1?e.keywords.map(t=>createMiniKeyword("./assets/symbol/"+cardOptionsData.icons[t])):e.keywords.map(t=>createWideKeyword(t,"./assets/symbol/"+cardOptionsData.icons[t]));if(n.lenght<=0)n="";else if(1===n.lenght)n=` <gtransform="translate(${340-n[0].width/2}, 544)"> ${n[0].content} </g>`;else{let t=340-n.reduce((t,a)=>t+a.width,0)/2,a=0;n=n.reduce((e,n)=>{let r=e+` <g transform="translate(${t+a}, 544)"> ${n.content} </g>`;return a+=n.width,r},"")}let r=` <svg width="680" height="1024" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 680 1024" class="{:this.app.cardInstance = this:}" > <clipPath id="art-mask"> <path d=" M 50, 60 h 580 v 830 l -290, 65 l -290, -65 Z " /> </clipPath> ${e.art?`<image id="card-art" clip-path="url(#art-mask)" xlink:href="${e.art}" x="{:this.app.card.transform.x:}|{card.transform.x}|" y="{:this.app.card.transform.y:}|{card.transform.y}|" preserveAspectRatio="xMidYMid meet" width="{:680 * this.app.card.transform.scale:}|{card.transform.scale}|" height="{:1024 * this.app.card.transform.scale:}|{card.transform.scale}|"  />`:""} <image id="card-frame" width="680" height="1024" x="0" y="0" xlink:href="./assets/landmark/frame${e.rarity}.png"/> ${e.faction.length?`<image id="card-region-box" width="120" height="360" x="557" y="37" href="./assets/regions/landmark/regionbox${e.faction.length<3?e.faction.length:3}.png"/> <image id="card-region-1" width="90" height="90" x="574" y="66" href="./assets/regions/${e.faction[0]}.png"/>`:""} ${e.faction.length>1?`<image id="card-region-1" width="90" height="90" x="574" y="156" href="./assets/regions/${e.faction[1]}.png"/>`:""} ${e.faction.length>2?`<image id="card-region-1" width="90" height="90" x="574" y="246" href="./assets/regions/${e.faction[2]}.png"/>`:""} <rect id="mana-cost" width="120" height="120" x="31" y="44" opacity="0"/> <text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true, {valign: 'middle'})).catch(()=>{}):}" font-size="50" fill="#fff" stroke="#fff">${e.mana}</text> <g id="group-moveable" transform="translate(0, {: 192 - this.app.card.effectHeight > 0 ? 192 - this.app.card.effectHeight : 0:}|{card.effectHeight}|)"> <foreignObject style="background-color: rgba(0,0,0,0);" id="effect" width="500" height="192" x="90" y="640"> <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:{:this.app.card.effectFontSize:}|{card.effectFontSize}|px; text-align: center; overflow: hidden; max-height: 100%; color: #fff" data-init="{:proxymity.on.renderend.then(()=>this.app.effectResize(this)).then(()=>this.app.card.effectHeight = this.scrollHeight):}">${a.decorateText(e.effect)}</div> </foreignObject> \x3c!--<rect id="keywords" width="500" height="70" fill="#CFF" x="90" y="570" opacity="0.75"/>--\x3e ${n} <rect id="name" width="500" height="70" x="90" y="${e.keywords.length?500:570}" opacity="0"/> ${e.name?`<text class="key-text {:proxymity.on.renderend.then(()=>this.app.wrapText(this, true)).catch(()=>{}):}" font-size="36" fill="#fff" stroke="#fff" font-style="900">${e.name?e.name.toUpperCase():""}</text>`:""} </g> <g class="{:!this.app.card.art || this.app.exporting ? 'hide' : '' :}|{card.art},{exporting}|"> <path d=" M 340, 10 l 35, 60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-up" onclick="this.app.card.transform.y -= 10" class="clickable" /> <path d=" M 340, 980 l 35, -60 h -70 Z " fill="#fff" opacity="0.8" id="arrow-down" onclick="this.app.card.transform.y += 10" class="clickable" /> <path d=" M 0, 550 l 60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-left" onclick="this.app.card.transform.x -= 10" class="clickable" /> <path d=" M 680, 550 l -60, -35 v 70 Z " fill="#fff" opacity="0.8" id="arrow-right" onclick="this.app.card.transform.x += 10" class="clickable" /> <text font-size="156" x="180" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale += 0.05">+</text> <text font-size="156" x="440" y="345" fill="#fff" stroke="#fff" opacity="0.8" class="clickable" onclick="this.app.card.transform.scale -= 0.05">-</text> </g> </svg> `;return proxymity(r,a)},a.saveCard=async function(){let t=this;t.cardId=await App.storage.saveLandmark(t.card,t.cardId)},a.deleteCard=async function(){await App.storage.delSavedLandmark(this.cardId),window.location.reload()};App.landmarkBuilder=a;let n=proxymity(' <main class="flex hcenter gutter-rl-.5"> <div class="card-preview gutter-t-4 gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> {:this.app.createPreview():}|{card.name},{card.effect},{card.keywords.length},{card.mana},{card.art},{card.transform.x},{card.transform.y},{card.transform.scale},{card.faction.length},{card.blueWords.*},{card.rarity},{card.orangeWords.*}| <div class="flex hcenter gutter-tb"> <button onclick="this.app.exportCard()">Export</button> <div class="gutter-rl"></div> <button onclick="this.app.saveCard()">Save Card</button> <div class="gutter-rl"></div> <button onclick="this.app.deleteCard()" class="{:this.app.cardId ? \'\' : \'hide\':}|{cardId}|">Delete Card</button> </div> <div class="gutter-b-3"></div> </div> <div class="card-configs gutter-rl-.5 box-xs-12 box-s-8 box-m-6 box-l-4 box-xl-3"> {:this.app.cardOptionsController = App.cardOptions(this.app.card, [ "gemless", "common", "rare", "epic", ]):} </div> </main>\n',a);a.focus=a.focusFactory(n,"landmarkBuilder","Landmark Builder")}();