@font-face{
	font-family: BeaufortforLOLBold;
	src:
		url("/Assets/BeaufortforLOL-Bold.otf")
		format("truetype");
}
@font-face{
	font-family: BeaufortforLOLRegular;
	src:
		url("/Assets/BeaufortforLOLJa-Regular.ttf")
		format("opentype");
}
@font-face{
	font-family: UniversforRiotGamesRegular;
	src:
		url("/Assets/UniversforRiotGames-Regular.otf")
		format("opentype");
}
@font-face{
	font-family: UniversforRiotGamesUltraCondensed;
	src:
		url("/Assets/UniversforRiotGames-UltCond.otf")
		format("opentype");
}

svg, html {
	/* --effect-blue-text: #49a0f8; */
	--effect-blue-text: hsl(210, 93%, 63%);
	--effect-blue-text-outline: hsla(210, 93%, 63%, 0.7);
	/* --effect-orange-text: #fad65a; */
	--effect-orange-text: hsl(47, 94%, 67%);
	--effect-orange-text-outline: hsla(47, 94%, 67%, 0.7);
	--effect-white-text: #fff;
	--effect-white-text-outline: #444;
	--text-outline: var(--effect-white-text-outline);
}

input, textarea, button, select, .textarea {
	color: var(--color-text);
	background-color: var(--color-bg);
	border-color: var(--color-border);
}

button, select {
	border-radius: 0.2em;
	background-color: var(--color-light);
	border-color: var(--color-dark);
}

.card-text-universe {
	font-family: UniversforRiotGamesRegular;
}
.card-text-universe-condensed {
	font-family: UniversforRiotGamesUltraCondensed;
	letter-spacing: 0.09em;
}
.card-text-bold {
	font-family: BeaufortforLOLBold;
}
.card-text {
	font-family: BeaufortforLOLRegular;
}
.card-text-outline {
	-webkit-text-stroke-color: var(--text-outline);
	-webkit-text-stroke-width: 0.02em;
	text-stroke-color: var(--text-outline);
	text-stroke-width: 0.02em;
}
.card-text-no-outline {
	-webkit-text-stroke-width: 0;
	text-stroke-width: 0;
}

* {
	box-sizing: border-box;
}

img, svg {
    max-width: 100%;
    height: auto;
    font-family: UniversforRiotGamesRegular;
}

.bold {
	font-weight: bold;
}

.caps {
	text-transform: uppercase;
}

.fixed {
	position: fixed;
}

.clickable {
	cursor: pointer;
}

.hide {
	display: none;
}

.block, label {
	display: block;
}

.ghost {
	filter: saturate(0.05) contrast(0.75);
}

.invisable {
	opacity: 0;
}

.grow {
	flex-grow: 1;
}

.relative { position: relative }
.absolute { position: absolute }

.card-render-test {
	width: 50%;
	margin-left: auto;
	margin-right: auto;
}

.fitty-wrap {
	display: inline-block !important;
    white-space: normal !important;
}

.fitty-nowrap {
	display: inline-block !important;
    white-space: nowrap !important;
}

/* cute trick from https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/ */
.grow-wrap {
	/* easy way to plop the elements on top of each other and have them both sized based on the tallest one's height */
	display: grid;
	min-height: 7em;
}
.grow-wrap::after {
	/* Note the weird space! Needed to preventy jumpy behavior */
	content: attr(data-replicated-value) " ";

	/* This is how textarea text behaves */
	white-space: pre-wrap;

	/* Hidden from view, clicks, and screen readers */
	visibility: hidden;
}
.grow-wrap > textarea {
	/* You could leave this, but after a user resizes, then it ruins the auto sizing */
	resize: none;

	/* Firefox shows scrollbar on growth, you can hide like this. */
	overflow: hidden;
}
.grow-wrap > textarea,
.grow-wrap::after {
	/* Identical styling required!! */
	border: 1px solid black;
	padding: 0.5rem;
	font: inherit;

	/* Place on top of each other */
	grid-area: 1 / 1 / 2 / 2;
}

.text-center {
	text-align: center;
}

.capitalize {
	text-transform: capitalize;
}

.accordian {
	transform-origin: top;
	transform: scaleY(0);
	max-height: 0;

	animation-name: slide-up;
  	animation-duration: 0.5s;
	animation-iteration-count: 1;
}

.accordian.expanded {
	transform: scaleY(1);
	transition: 
		transform 0.5s ease 0s, 
		max-height 0s ease 0s;
	max-height: initial;
	
	animation-name: slide-down;
  	animation-duration: 0.5s;
	animation-iteration-count: 1;
}
.low-spec-mode .accordian,
.low-spec-mode .accordian.expanded {
	transition: none;
	animation: none;
}

@keyframes slide-down {
	0% {
		max-height: 0;
	}
	1% {
		transform: scaleY(0);
		max-height: initial;
	}
	100% {
		transform: scaleY(1);
		max-height: initial;
	}
}
	

@keyframes slide-up {
	0% {
		transform: scaleY(1);
		max-height: initial;
	}
	99% {
		transform: scaleY(0);
		max-height: initial;
	}
	100% {		
		max-height: 0;
	}
}
	
/* code for error state */
.error-box {
	position: fixed;
	bottom: 0;
	left: 0;
	right: 0;
}
.error-box pre.error-body {
	overflow: auto;
	background-color: var(--rgb-light);
}